// Scaffold for Option B: Custom Frontend + Assistants API + Shopify iFrame Embed

// Structure:
// - /frontend: React app (UI for Attune)
// - /server: Node.js/Express backend (routes API calls securely)
// - Vercel/Netlify deploys frontend and backend

// === Step 1: React Frontend (frontend/src/App.js) ===

npm install react-scripts;
import React, { useState } from 'react';
import './App.css';

function App() {
  const [messages, setMessages] = useState([]);
  const [input, setInput] = useState('');
  const [loading, setLoading] = useState(false);

  const sendMessage = async () => {
    if (!input.trim()) return;
    const userMessage = { role: 'user', content: input };
    setMessages([...messages, userMessage]);
    setInput('');
    setLoading(true);

    const response = await fetch('/api/ask-attune', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ message: input })
    });

    const data = await response.json();
    const botMessage = { role: 'assistant', content: data.reply };
    setMessages((prev) => [...prev, botMessage]);
    setLoading(false);
  };

  return (
    <div className="chat-container">
      <h1>Attuneâ„¢ by ToyRx</h1>
      <div className="chat-box">
        {messages.map((msg, idx) => (
          <div key={idx} className={msg.role}>{msg.content}</div>
        ))}
        {loading && <div className="assistant">Attune is thinking...</div>}
      </div>
      <input
        value={input}
        onChange={(e) => setInput(e.target.value)}
        placeholder="Ask your question here..."
        onKeyDown={(e) => e.key === 'Enter' && sendMessage()}
      />
      <button onClick={sendMessage}>Send</button>
    </div>
  );
}

export default App;

// === Step 2: Node.js Backend (server/index.js) ===

const express = require('express');
const bodyParser = require('body-parser');
const cors = require('cors');
const { OpenAI } = require('openai');

const app = express();
app.use(cors());
app.use(bodyParser.json());

const openai = new OpenAI({ apiKey: process.env.OPENAI_API_KEY });
const assistantId = 'asst_9t8RWI3CIUU5w94NbIcq83F6'; // Replace with your real assistant ID

app.post('/api/ask-attune', async (req, res) => {
  const userInput = req.body.message;
  const thread = await openai.beta.threads.create();
  await openai.beta.threads.messages.create(thread.id, {
    role: 'user',
    content: userInput
  });

  const run = await openai.beta.threads.runs.create(thread.id, {
    assistant_id: assistantId
  });

  let runStatus;
  do {
    runStatus = await openai.beta.threads.runs.retrieve(thread.id, run.id);
    await new Promise((r) => setTimeout(r, 1500));
  } while (runStatus.status !== 'completed');

  const messages = await openai.beta.threads.messages.list(thread.id);
  const reply = messages.data[0].content[0].text.value;

  res.json({ reply });
});

app.listen(3001, () => console.log('Server running on http://localhost:3001'));

// === Step 3: Deployment ===
// - Host frontend (React) and backend (Express) on Vercel or Netlify
// - Set environment variable OPENAI_API_KEY securely
// - Embed via <iframe src="https://your-vercel-app.vercel.app" width="100%" height="600" style="border:none;">
